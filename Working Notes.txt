IDEA: do a full_clean() on realted forms when getting them. First need to ensure they are  bound (have data) and if not bind them somehow. Need to work out how and when is_boiund becomes true on a form. Could be as simple a form.data being set to teh request.POST dictionary?

form.instance is populated by form.datain:

def construct_instance(form, instance, fields=None, exclude=None):

at this point form.cleaned_data only has the data relevant to the form (all the related form data has been removed).
But form.data contains all the form data.

This calls:
    def save_form_data(self, instance, data):
        setattr(instance, self.name, data)

to set the instance attributes:

construct_instance is called from BaseModelForm._post_clean() which is called from BaseForm.full_clean()which in turn can be invoked manually or implictily by BaseForm.errors or BaseForm.add_error or Basefor.is_valid etc.


So I think, we may need to construct_instances of all related forms from formdata, havng related_form.cleaned_data etc.
A jobbie?

It's BaseForm._clean_fields() that populates form.cleaned_data.

One hook in is at BaseForm.clean():

    def clean(self):
        """
        Hook for doing any extra form-wide cleaning after Field.clean() has been
        called on every field. Any ValidationError raised by this method will
        not be associated with a particular field; it will have a special-case
        association with the field named '__all__'.
        """
        return self.cleaned_data


Looks like there may be infrastructure here for builindg cleaned related forms and ultimately releated instances.

Question then is can the model.clean() methods actually validate the relationships. Needs some more drilling methinks.

I currently use save_related_forms() in my extensions and may need to split it into clean_related_forms() for the validation step. Could be that simple and may still have problems.





This is called from _post_clean() which ic called from full_clean() after clean fails with errors

self._update_errors(e)

But this does nothing just adds a messaghe to list of errors.


ProcessFormView
post
returns self.form_invalid(form) if errors were found.
Erros are in form._errors

It seems in the context "messages" is set with the list of errors.
I can't see how form._errros gets to messages in the context yet.

It is in self.get_context_data(form=form) of the default form_invalid handler that the value_lists in the related_forms are lost, which cause the repopulation glitch.


This:
return self.render_to_response(self.get_context_data(form=form))

returns  TemplateResponse which has contex_data which is still missing "messages". Bizarre.


Dang it, this the ocntext that ends up on the page (i.e. messages is in some other dictionary, not context_data. Curious.

{'False': False, 'None': None, 'True': True}
{'DEFAULT_MESSAGE_LEVELS': {'DEBUG': 10,
                            'ERROR': 40,
                            'INFO': 20,
                            'SUCCESS': 25,
                            'WARNING': 30},
 'csrf_token': <SimpleLazyObject: 'WEThp8QRtunGsFajid2nqL5xiMCE3dopyGW4El2wj6NumLh1IJtUt1HcQ56EedOF'>,
 'debug': True,
 'messages': <django.contrib.messages.storage.fallback.FallbackStorage object at 0x7f91f5e8a710>,
 'perms': <django.contrib.auth.context_processors.PermWrapper object at 0x7f91f5e8a0b8>,
 'request': '<<request>>',
 'sql_queries': <function debug.<locals>.<lambda> at 0x7f91e6537f28>,
 'user': <SimpleLazyObject: <User: bernd>>}
{}
{'default_datetime_input_format': 'Y-m-d H:i:s',
 'form': <SessionForm bound=True, valid=False, fields=(date_time;league;location;game;team_play)>,
 'game_individual_play': 'true',
 'game_max_players': 4,
 'game_max_players_per_team': 0,
 'game_min_players': 2,
 'game_min_players_per_team': 0,
 'game_team_play': 'false',
 'model': <class 'Leaderboards.models.Session'>,
 'model_name': 'Session',
 'model_name_plural': <django.utils.functional.lazy.<locals>.__proxy__ object at 0x7f91f7412550>,
 'operation': 'add',
 'related_forms': OrderedDict([('Rank',
                                <RankForm bound=False, valid=Unknown, fields=(session;rank;player;id)>),
                               ('Performance',
                                <PerformanceForm bound=False, valid=Unknown, fields=(session;player;partial_play_weighting;id)>)]),
 'title': 'New Session',
 'view': <Leaderboards.views.view_Add object at 0x7f91f5e8aba8>}
