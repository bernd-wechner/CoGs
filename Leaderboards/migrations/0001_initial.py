# Generated by Django 3.1.12 on 2021-06-30 11:37

import bitfield.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone
import django_model_privacy_mixin
import mapbox_location_field.models
import relativefilepathfield.fields
import timezone_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('BGGid', models.PositiveIntegerField(verbose_name='BoardGameGeek ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of the Game')),
                ('individual_play', models.BooleanField(default=True, verbose_name='Supports individual play')),
                ('team_play', models.BooleanField(default=False, verbose_name='Supports team play')),
                ('scoring', models.PositiveSmallIntegerField(choices=[(0, 'No scores'), ('Individual Scores', ((1, 'High Score wins'), (2, 'Low Score wins'))), ('Team Scores', ((3, 'High score wins'), (4, 'Low score wins')))], default=0)),
                ('min_players', models.PositiveIntegerField(default=2, verbose_name='Minimum number of players')),
                ('max_players', models.PositiveIntegerField(default=4, verbose_name='Maximum number of players')),
                ('min_players_per_team', models.PositiveIntegerField(default=2, verbose_name='Minimum number of players in a team')),
                ('max_players_per_team', models.PositiveIntegerField(default=4, verbose_name='Maximum number of players in a team')),
                ('expected_play_time', models.DurationField(default=datetime.timedelta(seconds=5400), verbose_name='Expected play time')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('name', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(code='reserved', inverse_match=True, message='Global is a reserved league name', regex='^Global$')], verbose_name='Name of the League')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('games', models.ManyToManyField(blank=True, related_name='played_by_leagues', to='Leaderboards.Game', verbose_name='Games')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
            ],
            options={
                'verbose_name': 'League',
                'verbose_name_plural': 'Leagues',
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('name', models.CharField(max_length=200, verbose_name='Name of the Location')),
                ('timezone', timezone_field.fields.TimeZoneField(default='Australia/Hobart', verbose_name='Timezone of the Location')),
                ('location', mapbox_location_field.models.LocationField(blank=True, map_attrs={}, verbose_name='Geolocation of the Location')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('leagues', models.ManyToManyField(blank=True, related_name='Locations_used', to='Leaderboards.League', verbose_name='Leagues using the Location')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('name_nickname', models.CharField(max_length=200, unique=True, verbose_name='Nickname')),
                ('name_personal', models.CharField(max_length=200, verbose_name='Personal Name')),
                ('name_family', models.CharField(max_length=200, verbose_name='Family Name')),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email Address')),
                ('BGGname', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='BoardGameGeek Name')),
                ('is_registrar', models.BooleanField(default=False, verbose_name='Authorised to record session results?')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Authorised to access the admin site?')),
                ('visibility_name_nickname', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=1, verbose_name='Nickname Visibility')),
                ('visibility_name_personal', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=1, verbose_name='Personal Name Visibility')),
                ('visibility_name_family', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=2, verbose_name='Family Name Visibility')),
                ('visibility_email_address', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=6, verbose_name='Email Address Visibility')),
                ('visibility_BGGname', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=6, verbose_name='BoardGameGeek Name Visibility')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('league', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_league_of', to='Leaderboards.league', verbose_name='Preferred League')),
                ('leagues', models.ManyToManyField(blank=True, related_name='players_in_league', to='Leaderboards.League', verbose_name='Leagues')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['name_nickname'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
            bases=(django_model_privacy_mixin.PrivacyMixIn, models.Model),
        ),
        migrations.CreateModel(
            name='Tourney',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('name', models.CharField(max_length=200, verbose_name='Name of the Tourney')),
                ('allowed_imbalance', models.FloatField(default=0.5, verbose_name='Maximum play count imbalance to rank in tourney')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tourneys_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Tourney',
                'verbose_name_plural': 'Tourneys',
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrueskillSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mu0', models.FloatField(default=25.0, verbose_name='TrueSkill Initial Mean (µ0)')),
                ('sigma0', models.FloatField(default=8.333333333333334, verbose_name='TrueSkill Initial Standard Deviation (σ0)')),
                ('delta', models.FloatField(default=0.0001, verbose_name='TrueSkill Delta (δ)')),
            ],
            options={
                'verbose_name': 'Trueskill settings',
                'verbose_name_plural': 'Trueskill settings',
            },
        ),
        migrations.CreateModel(
            name='TourneyRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('min_plays', models.PositiveIntegerField(default=2, verbose_name='Minimum number of plays to rank in tourney')),
                ('weight', models.FloatField(default=1, verbose_name='The weighting of this games contribution to a Tourney rating')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tourneyruless_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Leaderboards.game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tourneyruless_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('tourney', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='Leaderboards.tourney')),
            ],
            options={
                'verbose_name': 'Rule',
                'verbose_name_plural': 'Rules',
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tourney',
            name='games',
            field=models.ManyToManyField(through='Leaderboards.TourneyRules', to='Leaderboards.Game', verbose_name='Games'),
        ),
        migrations.AddField(
            model_name='tourney',
            name='last_edited_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tourneys_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='Name of the Team (optional)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('players', models.ManyToManyField(blank=True, editable=False, related_name='member_of_teams', to='Leaderboards.Player', verbose_name='Players')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time')),
                ('date_time_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Timezone')),
                ('team_play', models.BooleanField(default=False, verbose_name='Team Play')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='Leaderboards.game', verbose_name='Game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('league', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='Leaderboards.league', verbose_name='League')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='Leaderboards.location', verbose_name='Location')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'ordering': ['-date_time'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RebuildLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('ratings', models.PositiveIntegerField(verbose_name='Number of Ratings Built')),
                ('duration', models.DurationField(null=True, verbose_name='Duration of Rebuild')),
                ('trigger', models.PositiveSmallIntegerField(choices=[(0, 'User Request'), (1, 'Session Add'), (2, 'Session Edit'), (3, 'Session Delete')], default=0)),
                ('reason', models.TextField(verbose_name='Reason for Rebuild')),
                ('date_time_from', models.DateTimeField(blank=True, null=True, verbose_name='Game')),
                ('leaderboards_before_rebuild', relativefilepathfield.fields.RelativeFilePathField(blank=True, null=True, path='logs/rating_rebuilds')),
                ('leaderboards_after_rebuild', relativefilepathfield.fields.RelativeFilePathField(blank=True, null=True, path='logs/rating_rebuilds')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rebuildlogs_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rating_rebuild_requests', to='Leaderboards.game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rebuildlogs_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rebuild_logs', to='Leaderboards.session', verbose_name='Session')),
                ('sessions', models.ManyToManyField(blank=True, related_name='rating_rebuild_requests', to='Leaderboards.Session')),
            ],
            options={
                'verbose_name': 'Rebuild Log',
                'verbose_name_plural': 'Rebuild Logs',
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('plays', models.PositiveIntegerField(default=0, verbose_name='Play Count')),
                ('victories', models.PositiveIntegerField(default=0, verbose_name='Victory Count')),
                ('last_play', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc), verbose_name='Time of Last Play')),
                ('last_play_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Play, Timezone')),
                ('last_victory', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc), verbose_name='Time of Last Victory')),
                ('last_victory_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Victory, Timezone')),
                ('trueskill_mu', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ)')),
                ('trueskill_sigma', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ)')),
                ('trueskill_eta', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Rating (η)')),
                ('trueskill_mu0', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Initial Mean (µ)')),
                ('trueskill_sigma0', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Initial Standard Deviation (σ)')),
                ('trueskill_delta', models.FloatField(default=0.0001, verbose_name='TrueSkill Delta (δ)')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ratings_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='Leaderboards.game', verbose_name='Game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ratings_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='Leaderboards.player', verbose_name='Player')),
            ],
            options={
                'verbose_name': 'Rating',
                'verbose_name_plural': 'Ratings',
                'ordering': ['-trueskill_eta'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('rank', models.PositiveIntegerField(verbose_name='Rank')),
                ('score', models.IntegerField(blank=True, default=None, null=True, verbose_name='Score')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks', to='Leaderboards.player', verbose_name='Player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranks', to='Leaderboards.session', verbose_name='Session')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks', to='Leaderboards.team', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Rank',
                'verbose_name_plural': 'Ranks',
                'ordering': ['rank'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='player',
            name='teams',
            field=models.ManyToManyField(editable=False, related_name='players_in_team', to='Leaderboards.Team', verbose_name='Teams'),
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player', to=settings.AUTH_USER_MODEL, verbose_name='Username'),
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('partial_play_weighting', models.FloatField(default=1, verbose_name='Partial Play Weighting (ω)')),
                ('score', models.IntegerField(blank=True, default=None, null=True, verbose_name='Score')),
                ('play_number', models.PositiveIntegerField(default=1, editable=False, verbose_name='The number of this play (for this player at this game)')),
                ('victory_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='The count of victories after this session (for this player at this game)')),
                ('trueskill_mu_before', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ) before the session.')),
                ('trueskill_sigma_before', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ) before the session.')),
                ('trueskill_eta_before', models.FloatField(default=0, editable=False, verbose_name='Trueskill Rating (η) before the session.')),
                ('trueskill_mu_after', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ) after the session.')),
                ('trueskill_sigma_after', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ) after the session.')),
                ('trueskill_eta_after', models.FloatField(default=0, editable=False, verbose_name='Trueskill Rating (η) after the session.')),
                ('trueskill_mu0', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Initial Mean (µ)')),
                ('trueskill_sigma0', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Initial Standard Deviation (σ)')),
                ('trueskill_delta', models.FloatField(default=0.0001, editable=False, verbose_name='TrueSkill Delta (δ)')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, editable=False, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, editable=False, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, editable=False, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances', to='Leaderboards.player', verbose_name='Player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='Leaderboards.session', verbose_name='Session')),
            ],
            options={
                'verbose_name': 'Performance',
                'verbose_name_plural': 'Performances',
                'ordering': ['session', 'player'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='league',
            name='locations',
            field=models.ManyToManyField(blank=True, related_name='leagues_playing_here', to='Leaderboards.Location', verbose_name='Locations'),
        ),
        migrations.AddField(
            model_name='league',
            name='manager',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_managed', to='Leaderboards.player', verbose_name='Manager'),
        ),
        migrations.AddField(
            model_name='league',
            name='players',
            field=models.ManyToManyField(blank=True, related_name='member_of_leagues', to='Leaderboards.Player', verbose_name='Players'),
        ),
        migrations.AddField(
            model_name='game',
            name='leagues',
            field=models.ManyToManyField(blank=True, related_name='games_played', to='Leaderboards.League', verbose_name='Leagues'),
        ),
        migrations.AddField(
            model_name='game',
            name='tourneys',
            field=models.ManyToManyField(blank=True, through='Leaderboards.TourneyRules', to='Leaderboards.Tourney', verbose_name='Tourneys'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('start', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time')),
                ('end', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('location', models.ForeignKey(blank=-1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Leaderboards.location', verbose_name='Event location')),
                ('registrars', models.ManyToManyField(blank=True, related_name='registrar_at', to='Leaderboards.Player', verbose_name='Registrars')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('changes', models.TextField(null=True, verbose_name='Changes logged for this session')),
                ('leaderboard_impact_before_change', models.TextField(null=True, verbose_name='Leaderboard impact before the change')),
                ('leaderboard_impact_after_change', models.TextField(null=True, verbose_name='Leaderboard impact after the change')),
                ('has_impact', models.BooleanField(verbose_name='This change impacted the leaderboard')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='changelogs_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('game_after_change', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='session_after_change_logs', to='Leaderboards.game')),
                ('game_before_change', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='session_before_change_logs', to='Leaderboards.game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='changelogs_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('rebuild_log', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='change_logs', to='Leaderboards.rebuildlog')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='change_impacts', to='Leaderboards.session', verbose_name='Session')),
            ],
            options={
                'verbose_name': 'Change Log',
                'verbose_name_plural': 'Change Logs',
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BackupRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Creation')),
                ('created_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Creation, Timezone')),
                ('last_edited_on', models.DateTimeField(editable=False, null=True, verbose_name='Time of Last Edit')),
                ('last_edited_on_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Edit, Timezone')),
                ('plays', models.PositiveIntegerField(default=0, verbose_name='Play Count')),
                ('victories', models.PositiveIntegerField(default=0, verbose_name='Victory Count')),
                ('last_play', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc), verbose_name='Time of Last Play')),
                ('last_play_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Play, Timezone')),
                ('last_victory', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc), verbose_name='Time of Last Victory')),
                ('last_victory_tz', timezone_field.fields.TimeZoneField(default='Australia/Hobart', editable=False, verbose_name='Time of Last Victory, Timezone')),
                ('trueskill_mu', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ)')),
                ('trueskill_sigma', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ)')),
                ('trueskill_eta', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Rating (η)')),
                ('trueskill_mu0', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Initial Mean (µ)')),
                ('trueskill_sigma0', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Initial Standard Deviation (σ)')),
                ('trueskill_delta', models.FloatField(default=0.0001, verbose_name='TrueSkill Delta (δ)')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backupratings_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backupratings', to='Leaderboards.game', verbose_name='Game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backupratings_last_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last Edited By')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backupratings', to='Leaderboards.player', verbose_name='Player')),
            ],
            options={
                'ordering': ['-trueskill_eta'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='tourney',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_tourney_name'),
        ),
        migrations.AddConstraint(
            model_name='league',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_league_name'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_game_name'),
        ),
    ]
