# Generated by Django 2.1.1 on 2019-02-03 12:33

import bitfield.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc
import django_model_privacy_mixin


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Backup_Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('plays', models.PositiveIntegerField(default=0, verbose_name='Play Count')),
                ('victories', models.PositiveIntegerField(default=0, verbose_name='Victory Count')),
                ('last_play', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc))),
                ('last_victory', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc))),
                ('trueskill_mu', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ)')),
                ('trueskill_sigma', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ)')),
                ('trueskill_eta', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Rating (η)')),
                ('trueskill_mu0', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Initial Mean (µ)')),
                ('trueskill_sigma0', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Initial Standard Deviation (σ)')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_delta', models.FloatField(default=0.0001, verbose_name='TrueSkill Delta (δ)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backup_ratings_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-trueskill_eta'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=200, verbose_name='Name of the Game')),
                ('BGGid', models.PositiveIntegerField(verbose_name='BoardGameGeek ID')),
                ('individual_play', models.BooleanField(default=True)),
                ('team_play', models.BooleanField(default=False)),
                ('min_players', models.PositiveIntegerField(default=2, verbose_name='Minimum number of players')),
                ('max_players', models.PositiveIntegerField(default=4, verbose_name='Maximum number of players')),
                ('min_players_per_team', models.PositiveIntegerField(default=2, verbose_name='Minimum number of players in a team')),
                ('max_players_per_team', models.PositiveIntegerField(default=4, verbose_name='Maximum number of players in a team')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_last_edited', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(code='reserved', inverse_match=True, message='GLOBAL is a reserved league name', regex='^GLOBAL$')], verbose_name='Name of the League')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_created', to=settings.AUTH_USER_MODEL)),
                ('games', models.ManyToManyField(blank=True, related_name='played_by_leagues', to='Leaderboards.Game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_last_edited', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=200, verbose_name='name of the location')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations_last_edited', to=settings.AUTH_USER_MODEL)),
                ('leagues', models.ManyToManyField(blank=True, related_name='Locations_used', to='Leaderboards.League')),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('partial_play_weighting', models.FloatField(default=1, verbose_name='Partial Play Weighting (ω)')),
                ('play_number', models.PositiveIntegerField(default=1, editable=False, verbose_name='The number of this play (for this player at this game)')),
                ('victory_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='The count of victories after this session (for this player at this game)')),
                ('trueskill_mu_before', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ) before the session.')),
                ('trueskill_sigma_before', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ) before the session.')),
                ('trueskill_eta_before', models.FloatField(default=0, editable=False, verbose_name='Trueskill Rating (η) before the session.')),
                ('trueskill_mu_after', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ) after the session.')),
                ('trueskill_sigma_after', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ) after the session.')),
                ('trueskill_eta_after', models.FloatField(default=0, editable=False, verbose_name='Trueskill Rating (η) after the session.')),
                ('trueskill_mu0', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Initial Mean (µ)')),
                ('trueskill_sigma0', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Initial Standard Deviation (σ)')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, editable=False, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_delta', models.FloatField(default=0.0001, editable=False, verbose_name='TrueSkill Delta (δ)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, editable=False, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, editable=False, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances_last_edited', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['session', 'player'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('name_nickname', models.CharField(max_length=200, unique=True, verbose_name='Nickname')),
                ('name_personal', models.CharField(max_length=200, verbose_name='Personal Name')),
                ('name_family', models.CharField(max_length=200, verbose_name='Family Name')),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email Address')),
                ('BGGname', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='BoardGameGeek Name')),
                ('is_registrar', models.BooleanField(default=False, verbose_name='Authorised to record session results?')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Authorised to access the admin site?')),
                ('visibility_name_nickname', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=0, verbose_name='Nickname Visibility')),
                ('visibility_name_personal', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=0, verbose_name='Personal Name Visibility')),
                ('visibility_name_family', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=0, verbose_name='Family Name Visibility')),
                ('visibility_email_address', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=0, verbose_name='Email Address Visibility')),
                ('visibility_BGGname', bitfield.models.BitField((('all', 'Everyone'), ('share_leagues', 'League Members'), ('share_teams', 'Team Members'), ('all_is_registrar', 'Registrars'), ('all_is_staff', 'Staff')), blank=True, default=0, verbose_name='BoardGameGeek Name Visibility')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players_last_edited', to=settings.AUTH_USER_MODEL)),
                ('league', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_league_of', to='Leaderboards.League', verbose_name='Preferred League')),
                ('leagues', models.ManyToManyField(blank=True, related_name='players_in_league', to='Leaderboards.League')),
            ],
            options={
                'ordering': ['name_nickname'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
            bases=(django_model_privacy_mixin.PrivacyMixIn, models.Model),
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('rank', models.PositiveIntegerField()),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks_last_edited', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks', to='Leaderboards.Player')),
            ],
            options={
                'ordering': ['rank'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('plays', models.PositiveIntegerField(default=0, verbose_name='Play Count')),
                ('victories', models.PositiveIntegerField(default=0, verbose_name='Victory Count')),
                ('last_play', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc))),
                ('last_victory', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc))),
                ('trueskill_mu', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Mean (µ)')),
                ('trueskill_sigma', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Standard Deviation (σ)')),
                ('trueskill_eta', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Rating (η)')),
                ('trueskill_mu0', models.FloatField(default=25.0, editable=False, verbose_name='Trueskill Initial Mean (µ)')),
                ('trueskill_sigma0', models.FloatField(default=8.333333333333334, editable=False, verbose_name='Trueskill Initial Standard Deviation (σ)')),
                ('trueskill_beta', models.FloatField(default=4.166666666666667, verbose_name='TrueSkill Skill Factor (ß)')),
                ('trueskill_delta', models.FloatField(default=0.0001, verbose_name='TrueSkill Delta (δ)')),
                ('trueskill_tau', models.FloatField(default=0.08333333333333334, verbose_name='TrueSkill Dynamics Factor (τ)')),
                ('trueskill_p', models.FloatField(default=0.1, verbose_name='TrueSkill Draw Probability (p)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ratings_created', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='Leaderboards.Game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ratings_last_edited', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='Leaderboards.Player')),
            ],
            options={
                'ordering': ['-trueskill_eta'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rebuild_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('ratings', models.PositiveIntegerField()),
                ('duration', models.DurationField()),
                ('reason', models.TextField(verbose_name='Reason')),
                ('rebuilt_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rating_rebuilds', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time')),
                ('team_play', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions_created', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='Leaderboards.Game')),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions_last_edited', to=settings.AUTH_USER_MODEL)),
                ('league', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='Leaderboards.League')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='Leaderboards.Location')),
            ],
            options={
                'ordering': ['-date_time'],
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(editable=False, null=True)),
                ('last_edited_on', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=200, null=True, verbose_name='Name of the Team (optional)')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams_last_edited', to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(blank=True, editable=False, related_name='member_of_teams', to='Leaderboards.Player')),
            ],
            options={
                'get_latest_by': 'created_on',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrueskillSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mu0', models.FloatField(default=25.0, verbose_name='TrueSkill Initial Mean (µ0)')),
                ('sigma0', models.FloatField(default=8.333333333333334, verbose_name='TrueSkill Initial Standard Deviation (σ0)')),
                ('beta', models.FloatField(default=4.166666666666667, verbose_name='TrueSkill Skill Factor (ß)')),
                ('delta', models.FloatField(default=0.0001, verbose_name='TrueSkill Delta (δ)')),
            ],
            options={
                'verbose_name_plural': 'Trueskill settings',
            },
        ),
        migrations.AddField(
            model_name='rank',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranks', to='Leaderboards.Session'),
        ),
        migrations.AddField(
            model_name='rank',
            name='team',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranks', to='Leaderboards.Team'),
        ),
        migrations.AddField(
            model_name='player',
            name='teams',
            field=models.ManyToManyField(editable=False, related_name='players_in_team', to='Leaderboards.Team'),
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='performance',
            name='player',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances', to='Leaderboards.Player'),
        ),
        migrations.AddField(
            model_name='performance',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='Leaderboards.Session'),
        ),
        migrations.AddField(
            model_name='league',
            name='locations',
            field=models.ManyToManyField(blank=True, related_name='leagues_playing_here', to='Leaderboards.Location'),
        ),
        migrations.AddField(
            model_name='league',
            name='manager',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leagues_managed', to='Leaderboards.Player'),
        ),
        migrations.AddField(
            model_name='league',
            name='players',
            field=models.ManyToManyField(blank=True, related_name='member_of_leagues', to='Leaderboards.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='leagues',
            field=models.ManyToManyField(blank=True, related_name='games_played', to='Leaderboards.League'),
        ),
        migrations.AddField(
            model_name='backup_rating',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_ratings', to='Leaderboards.Game'),
        ),
        migrations.AddField(
            model_name='backup_rating',
            name='last_edited_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backup_ratings_last_edited', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='backup_rating',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_ratings', to='Leaderboards.Player'),
        ),
    ]
